-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE `cast` (
	`movie_id`	INTEGER,
	`cast_id`	INTEGER,
	`cast_name`	TEXT
);
CREATE TABLE `movies` (
	`id`	INTEGER,
	`name`	TEXT,
	`score`	INTEGER
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.separator ','
.import movie-cast.txt cast
.import movie-name-score.txt movies


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX `cast_index` ON `cast` (
	`cast_id`
);

CREATE INDEX `movie_index` ON `movies` (
	`id`
);

CREATE INDEX `scores_index` ON `movies` (
	`score`
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

SELECT AVG(score) AS "average_score"
FROM movies
WHERE score >=5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

SELECT id, name, score
FROM movies
ORDER BY score ASC, name ASC
LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, COUNT(movie_id) AS "movie_count"
FROM cast
GROUP BY cast_id
HAVING COUNT(cast_id) = 2
ORDER BY cast_name ASC
LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, avg(movies.score) AS "score"
FROM cast
INNER JOIN movies ON movie_id = movies.id
WHERE movies.score >40 
GROUP by cast_id 
HAVING COUNT(cast_id) > 2
ORDER BY score DESC, cast_name ASC
LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW [good_collaboration] AS
SELECT DISTINCT t1.cast_id AS "cast_member_id1", 
t2.cast_id AS "cast_member_id2", 
COUNT(t1.movie_id) AS "movie_count", 
AVG(movies.score) AS "average_movie_score"
From cast t1, cast t2
INNER JOIN movies ON t1.movie_id = movies.id
WHERE t1.movie_id = t2.movie_id AND t1.cast_id < t2.cast_id
GROUP by t1.cast_id, t2.cast_id
HAVING COUNT(t2.movie_id) >= 3 AND AVG(movies.score) >=50
AND t1.cast_id <> t2.cast_id;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, good_collaboration.average_movie_score AS "collaboration_score"
FROM cast
INNER JOIN [good_collaboration] ON cast_member_id1 AND cast_member_id2 = cast_id 
GROUP BY cast_id
ORDER BY collaboration_score DESC, cast_name ASC
LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE movie_overview USING fts4(id integer,name text,year integer,overview text,popularity decimal);
.separator ','
.import movie-overview.txt movie_overview



-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT count(id) AS count_overview
From movie_overview
WHERE overview MATCH 'fight';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]
SELECT id
From movie_overview
WHERE overview MATCH 'love NEAR/5 story';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --